version: '3.8'

services:
  db:
    # ... db 서비스 설정은 그대로 ...
    image: mysql:8.0
    container_name: mysql_db
    # 메모리 제한 설정 (2GB 서버에서 MySQL이 최대 800MB 사용)
    mem_limit: 800m
    mem_reservation: 400m
    memswap_limit: 1g
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # MySQL 메모리 최적화 설정 (2GB 서버용)
      MYSQL_INNODB_BUFFER_POOL_SIZE: 400M
      MYSQL_INNODB_LOG_FILE_SIZE: 128M
      MYSQL_MAX_CONNECTIONS: 50
    volumes:
      - ./init.db.sql:/docker-entrypoint-initdb.d/init.db.sql
      - db_data:/var/lib/mysql
    ports:
      - '3306:3306'
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          'localhost',
          '-u$$MYSQL_USER',
          '-p$$MYSQL_PASSWORD',
        ]
      interval: 10s
      timeout: 15s
      retries: 15
      start_period: 90s

  web:
    build: ./app
    container_name: flask_app
    # Flask 앱 메모리 제한 설정 (텔레그램 봇 포함)
    mem_limit: 1g
    mem_reservation: 600m
    ports:
      - '5001:5000'
    volumes:
      - ./app:/app
    environment:
      DATABASE_URL: ${DATABASE_URL}
    networks:
      - app_network
    env_file:
      - ./.env
    restart: always
    depends_on:
      db:
        condition: service_healthy
    # [수정] python 직접 실행 대신 wait-for-db.sh 스크립트를 통해 실행
    command: ['./wait-for-db.sh', 'db', 'python', '-m', 'app.main']

  frontend:
    build: ./frontend
    container_name: react_frontend
    ports:
      - '80:80'
    networks:
      - app_network
    restart: always
    depends_on:
      - web

networks:
  app_network:
    driver: bridge

volumes:
  db_data:
